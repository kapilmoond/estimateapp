# =============================================================================
# IMPORTS
# =============================================================================
import sys
import ezdxf
from ezdxf.enums import TextEntityAlignment

# =============================================================================
# METADATA
# =============================================================================
# This script generates a complete architectural drawing of a simple house,
# including a floor plan and a front elevation, presented on a title block.
# It serves as a comprehensive example and tutorial for the ezdxf library.
# Generated by: AI Agent (Gemini)
# Date: 2025-09-09
# User Request: "Create a detailed python code which will work as a tutorial
#                as well as example for making a complete plan and elevation
#                of a house."

# =============================================================================
# HELPER FUNCTIONS (FOR BLOCK DEFINITIONS)
# =============================================================================

def define_door_plan_block(doc):
    """Creates a 'DOOR_PLAN' block for a 900mm wide door."""
    block_name = "DOOR_PLAN"
    if block_name not in doc.blocks:
        door_block = doc.blocks.new(name=block_name, base_point=(0, 0))
        # Add door frame and swing arc on layer '0' for flexibility
        attribs = {'layer': '0'}
        # Door frame
        door_block.add_lwpolyline([(0, -15), (0, 15), (30, 15), (30, -15)], close=True, dxfattribs=attribs)
        # Door leaf
        door_block.add_lwpolyline([(30, 0), (930, 0)], dxfattribs=attribs)
        # Door swing
        door_block.add_arc(center=(30, 0), radius=900, start_angle=0, end_angle=90, dxfattribs=attribs)
        print(f"Block '{block_name}' created.")

def define_window_plan_block(doc):
    """Creates a 'WINDOW_PLAN' block for a 1500mm wide window."""
    block_name = "WINDOW_PLAN"
    if block_name not in doc.blocks:
        window_block = doc.blocks.new(name=block_name, base_point=(0, 0))
        attribs = {'layer': '0'}
        # Window frame
        window_block.add_lwpolyline([(0, -100), (1500, -100), (1500, 100), (0, 100)], close=True, dxfattribs=attribs)
        # Glass pane lines
        window_block.add_line((0, 0), (1500, 0), dxfattribs=attribs)
        print(f"Block '{block_name}' created.")

def define_door_elevation_block(doc):
    """Creates a 'DOOR_ELEVATION' block for a 900x2100mm door."""
    block_name = "DOOR_ELEVATION"
    if block_name not in doc.blocks:
        door_block = doc.blocks.new(name=block_name, base_point=(0, 0))
        attribs = {'layer': '0'}
        # Door outline
        door_block.add_lwpolyline([(0, 0), (900, 0), (900, 2100), (0, 2100)], close=True, dxfattribs=attribs)
        # Handle
        door_block.add_circle((800, 1050), 30, dxfattribs=attribs)
        print(f"Block '{block_name}' created.")

def define_window_elevation_block(doc):
    """Creates a 'WINDOW_ELEVATION' block for a 1500x1200mm window."""
    block_name = "WINDOW_ELEVATION"
    if block_name not in doc.blocks:
        window_block = doc.blocks.new(name=block_name, base_point=(0, 0))
        attribs = {'layer': '0'}
        # Window frame
        window_block.add_lwpolyline([(0, 0), (1500, 0), (1500, 1200), (0, 1200)], close=True, dxfattribs=attribs)
        # Mullion and Transom
        window_block.add_line((750, 0), (750, 1200), dxfattribs=attribs)
        window_block.add_line((0, 600), (1500, 600), dxfattribs=attribs)
        print(f"Block '{block_name}' created.")

def define_title_block_A1(doc):
    """Creates a standard A1 Title Block with attributes."""
    block_name = "TITLE_BLOCK_A1"
    if block_name not in doc.blocks:
        tb = doc.blocks.new(name=block_name, base_point=(0, 0))
        # A1 Paper is 841x594 mm.
        # Outer border
        tb.add_lwpolyline([(0,0), (841,0), (841,594), (0,594)], close=True, dxfattribs={'layer': '0'})
        # Inner border
        tb.add_lwpolyline([(10,10), (831,10), (831,584), (10,584)], close=True, dxfattribs={'layer': '0'})
        # Title area box
        tb.add_lwpolyline([(581,10), (581,100), (831,100), (831,10)], close=False, dxfattribs={'layer': '0'})
        tb.add_line((581, 40), (831, 40), dxfattribs={'layer': '0'})
        tb.add_line((581, 70), (831, 70), dxfattribs={'layer': '0'})

        # Add Attribute Definitions for text placeholders
        common_attribs = {'height': 5, 'layer': '0'}
        title_attribs = {'height': 8, 'layer': '0'}
        
        att_title = tb.add_attdef("DRAWING_TITLE", "PROJECT TITLE", insert=(706, 80), dxfattribs=title_attribs)
        att_title.set_placement((706, 80), align=TextEntityAlignment.MIDDLE_CENTER)

        att_drawn = tb.add_attdef("DRAWN_BY", "AI", insert=(706, 50), dxfattribs=common_attribs)
        att_drawn.set_placement((706, 50), align=TextEntityAlignment.MIDDLE_CENTER)

        att_scale = tb.add_attdef("SCALE", "NTS", insert=(631, 20), dxfattribs=common_attribs)
        att_scale.set_placement((631, 20), align=TextEntityAlignment.MIDDLE_CENTER)

        att_date = tb.add_attdef("DATE", "YYYY-MM-DD", insert=(781, 20), dxfattribs=common_attribs)
        att_date.set_placement((781, 20), align=TextEntityAlignment.MIDDLE_CENTER)
        print(f"Block '{block_name}' created.")


# =============================================================================
# MAIN SCRIPT
# =============================================================================

def create_drawing(filepath: str):
    """
    This function contains the entire logic for creating the DXF document.
    """
    # -------------------------------------------------------------------------
    # 1. DOCUMENT CREATION
    # -------------------------------------------------------------------------
    try:
        doc = ezdxf.new("R2018", setup=True)
    except IOError:
        print(f"ERROR: Could not create new DXF document.")
        sys.exit(1)

    msp = doc.modelspace()

    # -------------------------------------------------------------------------
    # 2. SETUP (LAYERS, TEXT STYLES, DIMENSION STYLES)
    # -------------------------------------------------------------------------
    print("Setting up layers, text styles, and dimension styles...")

    # Layers - ACI (AutoCAD Color Index)
    layers = {
        "00_WALLS": (7, 'CONTINUOUS'),  # White
        "01_WINDOWS": (4, 'CONTINUOUS'),  # Cyan
        "02_DOORS": (2, 'CONTINUOUS'),    # Yellow
        "04_ANNOTATIONS": (6, 'CONTINUOUS'), # Magenta
        "05_DIMENSIONS": (1, 'CONTINUOUS'),  # Red
        "06_HATCHES": (8, 'CONTINUOUS'),    # Gray
        "07_ELEVATION_LINES": (5, 'CONTINUOUS'), # Blue
        "08_ROOF": (9, 'CONTINUOUS'),       # Light Red/Orange
        "ZZ_TITLE_BLOCK": (7, 'CONTINUOUS') # White
    }
    for name, (color, linetype) in layers.items():
        if name not in doc.layers:
            doc.layers.new(name, dxfattribs={'color': color, 'linetype': linetype})

    # Text Style
    if "Standard" not in doc.styles:
        doc.styles.new("Standard", dxfattribs={'font': 'Arial.ttf'})

    # Dimension Style for visible text and arrows
    dim_style_name = "EZ_ARCH"
    if dim_style_name not in doc.dimstyles:
        dimstyle = doc.dimstyles.new(dim_style_name)
        dimstyle.dxf.dimtxt = 150    # Text height
        dimstyle.dxf.dimasz = 100    # Arrow size
        dimstyle.dxf.dimclrd = 1     # Dimension line color (Red)
        dimstyle.dxf.dimclrt = 2     # Dimension text color (Yellow)
        dimstyle.dxf.dimclre = 1     # Extension line color (Red)
        dimstyle.dxf.dimtxsty = "Standard"
        dimstyle.dxf.dimblk = "ARCHTICK" # Architectural tick

    # -------------------------------------------------------------------------
    # 3. BLOCK DEFINITIONS (THE BLUEPRINTS)
    # -------------------------------------------------------------------------
    print("Creating block definitions...")
    define_door_plan_block(doc)
    define_window_plan_block(doc)
    define_door_elevation_block(doc)
    define_window_elevation_block(doc)
    define_title_block_A1(doc)

    # -------------------------------------------------------------------------
    # 4. ENTITY PLACEMENT (THE ACTUAL DRAWING)
    # -------------------------------------------------------------------------
    print("Placing entities into Modelspace...")

    # --- FLOOR PLAN ---
    # The origin for the floor plan will be (0, 0)
    # Dimensions are in millimeters.
    
    # Walls (10m x 8m house with 200mm thick walls)
    outer_wall_pts = [(0, 0), (10000, 0), (10000, 8000), (0, 8000)]
    inner_wall_pts = [(200, 200), (9800, 200), (9800, 7800), (200, 7800)]
    
    outer_boundary = msp.add_lwpolyline(outer_wall_pts, close=True, dxfattribs={'layer': '00_WALLS'})
    inner_boundary = msp.add_lwpolyline(inner_wall_pts, close=True, dxfattribs={'layer': '00_WALLS'})

    # Wall Hatch
    hatch = msp.add_hatch(color=8, dxfattribs={'layer': '06_HATCHES'})
    hatch.set_pattern_fill('SOLID')
    # Add outer boundary first, then inner boundary as a hole
    hatch.paths.add_polyline_path(outer_boundary.get_points(format='xyb'), is_closed=True)
    hatch.paths.add_polyline_path(inner_boundary.get_points(format='xyb'), is_closed=True)

    # Place Doors and Windows (Block References)
    msp.add_blockref("DOOR_PLAN", insert=(1500, 0), dxfattribs={'layer': '02_DOORS'}).explode() # Explode to trim wall
    msp.add_blockref("WINDOW_PLAN", insert=(4000, 0), dxfattribs={'layer': '01_WINDOWS'}).explode()
    msp.add_blockref("WINDOW_PLAN", insert=(2000, 8000), dxfattribs={'layer': '01_WINDOWS', 'rotation': 180}).explode()

    # Room Labels
    msp.add_mtext("LIVING AREA\n6.0m x 7.6m", dxfattribs={
        'insert': (5000, 4000), 'char_height': 250, 'layer': '04_ANNOTATIONS',
        'attachment_point': 5 # Middle Center
    })

    # Dimensions
    # Overall Dimensions
    dim = msp.add_linear_dim(base=(5000, -1000), p1=(0,0), p2=(10000,0), angle=0, dimstyle=dim_style_name, dxfattribs={'layer': '05_DIMENSIONS'})
    dim.render()
    dim = msp.add_linear_dim(base=(-1000, 4000), p1=(0,0), p2=(0,8000), angle=90, dimstyle=dim_style_name, dxfattribs={'layer': '05_DIMENSIONS'})
    dim.render()

    # --- FRONT ELEVATION ---
    # Place the elevation 15m to the right of the plan to keep them separate
    ELEV_ORIGIN_X = 15000
    
    # Ground Line
    msp.add_line((ELEV_ORIGIN_X - 2000, 0), (ELEV_ORIGIN_X + 12000, 0), dxfattribs={'layer': '07_ELEVATION_LINES'})
    
    # Main wall outline (10m wide, 3m high)
    msp.add_lwpolyline([(ELEV_ORIGIN_X, 0), (ELEV_ORIGIN_X + 10000, 0), (ELEV_ORIGIN_X + 10000, 3000), (ELEV_ORIGIN_X, 3000)],
                       close=True, dxfattribs={'layer': '07_ELEVATION_LINES'})

    # Roof (Gable roof, 2.5m high)
    msp.add_lwpolyline([(ELEV_ORIGIN_X - 500, 3000), (ELEV_ORIGIN_X + 5000, 5500), (ELEV_ORIGIN_X + 10500, 3000)],
                       close=False, dxfattribs={'layer': '08_ROOF'})
    
    # Place Elevation Blocks
    msp.add_blockref("DOOR_ELEVATION", insert=(ELEV_ORIGIN_X + 1500, 0), dxfattribs={'layer': '02_DOORS'})
    msp.add_blockref("WINDOW_ELEVATION", insert=(ELEV_ORIGIN_X + 4000, 900), dxfattribs={'layer': '01_WINDOWS'})

    # Elevation Labels
    msp.add_text("FRONT ELEVATION", dxfattribs={'insert': (ELEV_ORIGIN_X + 5000, -1000), 'height': 300, 'layer': '04_ANNOTATIONS'}
                 ).set_placement((ELEV_ORIGIN_X + 5000, -1000), align=TextEntityAlignment.MIDDLE_CENTER)

    # Elevation Dimensions
    dim = msp.add_linear_dim(base=(ELEV_ORIGIN_X - 1000, 1500), p1=(ELEV_ORIGIN_X, 0), p2=(ELEV_ORIGIN_X, 3000), angle=90, dimstyle=dim_style_name, dxfattribs={'layer': '05_DIMENSIONS'})
    dim.render()
    dim = msp.add_linear_dim(base=(ELEV_ORIGIN_X - 1000, 4250), p1=(ELEV_ORIGIN_X, 3000), p2=(ELEV_ORIGIN_X + 5000, 5500), angle=90, dimstyle=dim_style_name, dxfattribs={'layer': '05_DIMENSIONS'})
    dim.render()


    # -------------------------------------------------------------------------
    # 6. LAYOUT AND VIEWPORT CREATION (NEW SECTION)
    # -------------------------------------------------------------------------
    print("Creating Paperspace layout with viewports...")

    layout_name = "A1_Layout"
    if layout_name not in doc.layouts:
        layout = doc.new_layout(layout_name)
    else:
        layout = doc.layouts.get(layout_name)
        layout.delete_all_viewports()

    # Setup A1 paper (841x594 mm)
    layout.page_setup(size=(841, 594), margins=(10, 10, 10, 10), units="mm")
    
    # Insert Title Block
    title_block_ref = layout.add_blockref(
        "TITLE_BLOCK_A1",
        insert=(0, 0),
        dxfattribs={'layer': 'ZZ_TITLE_BLOCK'}
    )
    title_block_ref.add_auto_attribs({
        'DRAWING_TITLE': 'HOUSE PLAN & ELEVATION',
        'DRAWN_BY': 'Gemini AI',
        'SCALE': '1:100',
        'DATE': '2025-09-09'
    })

    # Add Viewport for the Floor Plan (Scale 1:100)
    # A 10m (10000mm) house fits into a 100mm space on paper at 1:100
    # Paper space units are mm.
    plan_vp = layout.add_viewport(
        center=(300, 300),          # Center on the left side of the paper
        size=(400, 350),            # Size of viewport on paper (mm)
        view_center_point=(5000, 4000), # Center of the house plan in modelspace
        view_height=10000           # What height of the modelspace is visible
    )
    
    # Add Viewport for the Elevation (Scale 1:100)
    elev_vp = layout.add_viewport(
        center=(620, 300),           # Center on the right side of the paper
        size=(400, 350),             # Size of viewport on paper (mm)
        view_center_point=(ELEV_ORIGIN_X + 5000, 2750), # Center of the elevation in modelspace
        view_height=10000            # Same height for same scale
    )

    # -------------------------------------------------------------------------
    # 5. SAVE DOCUMENT
    # -------------------------------------------------------------------------
    try:
        doc.saveas(filepath)
        print(f"Successfully created DXF file: {filepath}")
    except IOError as e:
        print(f"ERROR: Could not save DXF file to '{filepath}'. Error: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"ERROR: Unexpected error while saving DXF file: {e}")
        sys.exit(1)

# =============================================================================
# SCRIPT EXECUTION
# =============================================================================
if __name__ == "__main__":
    output_filename = "house_plan_and_elevation_example.dxf"
    create_drawing(output_filename)